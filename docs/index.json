[{"categories":["tech"],"content":"最近花了一些时间把博客从 WordPress 迁移到了 Hugo 上。 来简单谈谈我的选择吧，夹杂一些胡思乱想，和技术上的关系不是很大。 大概是今年 2 月多吧，在大佬的指引下建立了自己的博客。 当时就是有些创作欲，又觉得知乎、CSDN、博客园之类的平台不够满意，于是做了这个有些草率的决定。 说草率主要是因为服务器蛮贵的。。。然后我发现自己目前的水平还不够高，只能写一些使用教程啥的。 就是肚里墨水不太足呗。 啊哈哈\r总之最初选择的是开箱即用、傻瓜操作的 WordPress。 它足够强大，资料也足够丰富，想要什么一查就有。 但是对我而言缺点也很快暴露出来。 ","date":"2022-08-12","objectID":"/posts/tech/about_migration_to_hugo/:0:0","tags":["思考"],"title":"迁移说明","uri":"/posts/tech/about_migration_to_hugo/"},{"categories":["tech"],"content":"1. 自定义需要一定的 PHP、CSS 功底 CSS 还好，只到够用的程度的话看看就懂。 何况基本上未来必学，早点熟悉也不是坏事。 但我对 PHP 并没有太多的兴趣（无贬义），可要是基本语法不懂基本上很难自定义，只能抄抄别人的代码，然后不断（痛苦）试错。 ","date":"2022-08-12","objectID":"/posts/tech/about_migration_to_hugo/:1:0","tags":["思考"],"title":"迁移说明","uri":"/posts/tech/about_migration_to_hugo/"},{"categories":["tech"],"content":"2. 编辑体验割裂 我喜欢用 markdown 写作。WordPress 则有自己的编辑器。 虽然也有很好的插件支持 markdown，然而在网站中写文章还是很割裂。 有一次我在写文章时服务器忽然崩了，重启后草稿丢失，失去灵感索然无味。 我其实最想要的是本地写作，然后某个命令一键发布。 ","date":"2022-08-12","objectID":"/posts/tech/about_migration_to_hugo/:2:0","tags":["思考"],"title":"迁移说明","uri":"/posts/tech/about_migration_to_hugo/"},{"categories":["tech"],"content":"3. 后台界面有点丑 指的是登录之后那个丑丑的页眉工具栏。 我试了不少方法自定义，都以失败告终。 而后台的设置界面反应不够快，还经常要在主题文件编辑器和主页之间来回窜。 ","date":"2022-08-12","objectID":"/posts/tech/about_migration_to_hugo/:3:0","tags":["思考"],"title":"迁移说明","uri":"/posts/tech/about_migration_to_hugo/"},{"categories":["tech"],"content":"4. 功能太多太复杂 WordPress 并非一个纯粹的面向个人博客的网站系统，它是广义上的 CMS。 面对诸多商业网站的需求，因而必须要很多复杂的功能。包括在主题和插件中能搜索到的，很多都是面向电子商务网站的。 因为功能太多，所以 API 复杂，很难从中找到自己需要的。 ","date":"2022-08-12","objectID":"/posts/tech/about_migration_to_hugo/:4:0","tags":["思考"],"title":"迁移说明","uri":"/posts/tech/about_migration_to_hugo/"},{"categories":["tech"],"content":"简单纯粹就是好 其实这些原因都不算太大吧，只是一个个积累起来有点不顺手。 这种不顺手有点妨碍了我最初的目的——写作。我花了大量的时间去自定义页面主题，去寻找插件，反垃圾评论，SEO 等等。 可我最初只是想写点东西，释放释放创作欲。 现在我开始觉得简单纯粹的东西最好。 分析一下，我理想的博客系统只有如下需求： 方便的写作和发布 简易的评论系统 分类、标签功能 我是比较爱折腾的那种人，曾经花了两天捣鼓终端美化。这次也花了不少时间捣鼓了 Hugo。 它的主要优点是易于理解。不像 WordPress 那庞大的系统，难以知晓它在幕后究竟做了什么。Hugo 这样的静态网站生成器的大致行为很容易猜测。这使得自定义很方便。 它可以轻松满足我的三个需求。 静态页面还有个好处是硬件需求不高，而且迁移方便。搭建自己的博客只需 Github Pages 即可，没必要租服务器。而且 Github Pages 的集成更好使，推荐。 ","date":"2022-08-12","objectID":"/posts/tech/about_migration_to_hugo/:5:0","tags":["思考"],"title":"迁移说明","uri":"/posts/tech/about_migration_to_hugo/"},{"categories":["tech"],"content":"最小可工作的 Hugo 刚下载的 Hugo 需要找到一个合适的主题。幸好这方面资源很多，除了官方列表中的，在知乎等地搜索可以找到很多开源的主题。 我目前使用的 FixIt 就很让人满意。它所参考的 LoveIt 也很不错。 Hugo 不太方便的一点是，本地写作之后生成站点，需要手动同步到服务器中。 最开始我是用 WinSCP 的同步功能。但是它太慢了，而且还是需要不少操作。 后来是上传压缩包、解压、覆盖。虽然快了不少，但是操作更多。 现在的方案是在服务器维护远程非裸仓库，本地构建好直接 push 到远端即可，十分方便。 主题自带的分类和标签功能基本满足需求。而尽管现在尚未开启，评论系统也是支持的。 一切问题解决了。 现在的工作流程就是：本地写作 -\u003e hugo 构建 -\u003e push。 几乎是最小工作量了。 唯一可能改进的地方就是写作时用到的图片，目前我是手动将其放到 static 目录下，使用 pinga 压缩，然后在 md 中引用。 不过反正是在本地，未来完全可以写个简易程序将其自动化。 最理想的效果就是写作完，敲一个命令，然后自动将用到的图片处理好，并且构建和 push。 ","date":"2022-08-12","objectID":"/posts/tech/about_migration_to_hugo/:6:0","tags":["思考"],"title":"迁移说明","uri":"/posts/tech/about_migration_to_hugo/"},{"categories":["tech"],"content":"思考 这篇博客的标题，本来想叫做迁移说明和极简主义。 不过其实称不上极简啦。也就是偏好简单而已。 软件工程中著名的 KISS 原则，感觉同样可以应用到生活中。 越简单的人生，具有越强大的免疫力以抵挡外界。 希望能一直简单下去，提高自我，有朝一日写出对得起服务器价格的文章吧。 （不过刚好服务器快过期了，也许我会试着迁移到 Github Pages 上试试。) 8/13 更新说明： 花了一早上成功迁移到 Github Pages 上了，同样的写完 push 即可。 服务器拜拜咯，等我有钱了再考虑您呐。 现在的目标是有朝一日写出对得起自己部署网站花费的时间的文章了。 ","date":"2022-08-12","objectID":"/posts/tech/about_migration_to_hugo/:7:0","tags":["思考"],"title":"迁移说明","uri":"/posts/tech/about_migration_to_hugo/"},{"categories":["tech"],"content":"之前写课设时因为需要合作，于是在服务器上搭建了一个临时、简陋的 git 服务。 没有 web 界面，纯命令行交互，添加密钥都要手动 ssh 到服务器。 这次就尝试用开源应用搭建一个功能完善、使用方便、颜值能打的 git 服务。 ","date":"2022-08-11","objectID":"/posts/tech/self-build_git_service_with_gitea/:0:0","tags":["Linux","git"],"title":"Linux 通过 gogs 或 gitea 自建 Git 服务","uri":"/posts/tech/self-build_git_service_with_gitea/"},{"categories":["tech"],"content":"gogs 官网地址 国人大佬维护的、以 Golang 开发、支持 Linux、macOS、Windows 和基于 ARM 的操作系统的易用 Git 服务。 它的优点是所需性能极低，甚至可以在树莓派上运行起来；使用极其简单，只需几步设置。 预览（图片来自官网） ","date":"2022-08-11","objectID":"/posts/tech/self-build_git_service_with_gitea/:1:0","tags":["Linux","git"],"title":"Linux 通过 gogs 或 gitea 自建 Git 服务","uri":"/posts/tech/self-build_git_service_with_gitea/"},{"categories":["tech"],"content":"通过 Docker 使用 这里假设你已经安装好 docker，并且懂得基本的使用。 # 拉取官方镜像 docker pull gogs/gogs # 本地创建存放数据的目录 mkdir -p /var/gogs # 运行镜像 docker run --name=gogs -p 10022:22 -p 10880:3000 -v /var/gogs:/data gogs/gogs docker run 中的两个 -p 分别代表着 ssh 服务和主服务，将容器内的 22 号端口和 3000 号端口分别映射到外界的 10022 和 10880 端口。 注意，如果你看了一些过期的教程，它们可能让你将 3000 映射到 10080。从前这是可以的，但是某个版本之后，Chrome 因为安全原因禁止了 10080 端口的访问（Edge 和 Firefox 应该也是）。如果你用 10080，可能就会看到 error: kex_exchange_identification: client sent invalid protocol identifier 的错误提示。 如果一切顺利，现在就可以通过 服务器 IP:10880 在浏览器中看到安装界面了。如下： 数据库可以选 MySQL、PostgreSQL 或 SQLite3。注意如果用 MySQL 需要 5.7 及以上版本。实际上大部分情况 SQLite3 就够用了。 然后是下面的应用基本设置。 一般情况下其它不动，尤其是运行系统用户，似乎必须写 git，因为 docker 的运行脚本里面好像硬编码了 RUN_USER 为 git。 下图红框框选出的三个最好自己决定。应用名称我不知道会影响什么，但域名和应用 url，正如图中提示所言，会影响 clone 的地址。 如果不加修改，最后仓库的 clone 地址就会类似这样： 下面还有可选设置，如邮件服务器、禁止用户注册等等，不一一介绍。 现在，点击“立即安装”即可。 如果没有在可选设置里面注册管理员帐号，那么默认第一个注册的用户即是管理员。 gogs 的一些设置可以在 数据目录/gogs/conf/app.ini 修改，如： app.ini 位置\r设置的名称和格式都比较清楚，如有疑问可以查看仓库里的 app.ini。这是内嵌到二进制分发中的默认设置，其中有每个选项的英文介绍。 ","date":"2022-08-11","objectID":"/posts/tech/self-build_git_service_with_gitea/:1:1","tags":["Linux","git"],"title":"Linux 通过 gogs 或 gitea 自建 Git 服务","uri":"/posts/tech/self-build_git_service_with_gitea/"},{"categories":["tech"],"content":"二进制安装 和 Docker 大同小异。这里参考一下官方文档。 根据自己的版本下载二进制文件，上传到服务器。比如我放在了网站目录，实际上随便放个地方都行。 然后这里有个需要注意的点，平时我们 ssh 到服务器可能一直都是用的 root 用户。 而如果你运行 ./gogs web 时用的是 root 用户，应用设置里填的运行系统用户却是 git。那么最后就会报错 运行系统用户非当前用户:git -\u003e root。 实际上 git 服务也完全不需要 root 用户，我们应该切换到普通用户。 最好是用 git 这个用户名，这样最后 ssh 的 clone 地址就是 git@xxxx。不过如果你已经安装过 git，那么 git 这个用户可能已经被注册了，而且如果用 su git 切换到这个用户后似乎无法正常使用命令。 git 这个用户不行的话，就用 sudo adduser 另外创建用户，比如 sudo adduser gogs。按照指示完成创建，最后用 su gogs 切换过去即可。 cd 到二进制文件所在的目录，如果直接执行 ./gogs web 可能显示权限不足，那么就先 chmod +x gogs。如果是用 SQLite3 的话，为了后续能创建数据库，这里还要进行一下 chown gogs:gogs /www/wwwroot/repo.cxz888.xyz 把目录的权限赋予给当前用户。 剩下的就和 docker 差不多了，不过最后 ssh clone 地址是 gogs@xxxx。 可能遇到的情况是，gogs 默认情况下使用的是 3000 端口。如果你的 3000 端口已经被占用，那可能就需要一些修改。 按照官方所说，你不应该修改源代码中的 app.ini，而是应该在二进制文件所在目录下新建 custom/conf/app.ini。（docker 方式安装无需担心这点） 你可以添加如下内容修改端口： [server] HTTP_PORT = 10880 ","date":"2022-08-11","objectID":"/posts/tech/self-build_git_service_with_gitea/:1:2","tags":["Linux","git"],"title":"Linux 通过 gogs 或 gitea 自建 Git 服务","uri":"/posts/tech/self-build_git_service_with_gitea/"},{"categories":["tech"],"content":"gitea 官网地址 gitea 是 2016 年的时候从 gogs 项目中 fork 出来的。 似乎是策略不同，gitea 明显活跃程度更高一些，无论是 issue、PR 还是 commit 都远超 gogs。 我个人也觉得文档、功能、提示方面 gitea 做得更好。（仅个人感受，无意冒犯） 我直接尝试了二进制安装，参考官方教程。 同样需要把目录权限赋予当前用户。 如果在 root 用户下启用 ./gitea web，它会提示你 git 不需要用 root 用户并退出，硬要用 root 似乎也可以，按它的提示即可。 端口默认也是 3000，如有冲突解决方法和 gogs 类似。 官方提供了一个样例来解释你可以设置的选项。 启动之后的设置和 gogs 基本一样，不过你可以看见，默认主题是暗色主题（我挺喜欢这个） 预览一下最终界面： ","date":"2022-08-11","objectID":"/posts/tech/self-build_git_service_with_gitea/:2:0","tags":["Linux","git"],"title":"Linux 通过 gogs 或 gitea 自建 Git 服务","uri":"/posts/tech/self-build_git_service_with_gitea/"},{"categories":["tech"],"content":"IP 和端口映射 到现在为止，无论是 gogs 还是 gitea，也无论如何安装，用户都得通过 服务器 IP:端口 的方式访问主页，这无疑是很不便而丑陋的。 所以应当通过映射来使用域名直接访问。 可以参考我的「个人博客建站笔记」1.网站建成中域名解析的部分。 在你的域名服务上提供的 DNS 解析里添加 A 记录。比如我是将 repo.cxz888.xyz 解析到自己的服务器 IP。 DNS 解析对端口是一无所知的，所以现在得通过 repo.cxz888.xyz:端口号 来访问 git 服务，还是比较丑。 下一步就是通过宝塔的反向代理来解析端口。如果你不是用宝塔，那么可以根据你使用的 web 服务器软件，如 nginx、apache，去百度或谷歌搜索反向代理的方法。 你也可以顺手给这个网站申请个 SSL 证书 如上图，在宝塔后台设置反向代理，名称随意填，目标 URL 代表你实际要访问的地址，可以填入 http://服务器IP:端口号，发送域名就填上刚刚解析的域名即可。 现在，应该可以直接通过域名进入 git 服务了。 恭喜你完成了自建 git 服务。★,°:.☆(￣ ▽ ￣)/$:.°★ 。 如有疑问，欢迎评论留言~ 版权声明：本文采用 CC BY 4.0 进行许可，转载请注明出处。 本文链接：http://cxz888.xyz/posts/tech/self-build_git_service_with_gitea/ ","date":"2022-08-11","objectID":"/posts/tech/self-build_git_service_with_gitea/:3:0","tags":["Linux","git"],"title":"Linux 通过 gogs 或 gitea 自建 Git 服务","uri":"/posts/tech/self-build_git_service_with_gitea/"},{"categories":["life"],"content":"今天 (2022/5/15) 验收数电的实验。 各路神仙大战。 太可怕了。 可人生的意义难道仅在于此吗？ ","date":"2022-08-11","objectID":"/posts/life/thought_about_involution/:0:0","tags":["思考"],"title":" 数电实验验收，关于内卷","uri":"/posts/life/thought_about_involution/"},{"categories":["life"],"content":"1 数电实验的内容是使用蜂鸣器演奏歌曲。 模板代码老师写好了。基础任务就是换首曲子就行，扩展任务也就是加上变调的功能。 我摆了，所以只做了基础任务。本来想换首国际歌，可惜室友先行一步，于是我又换了喀秋莎。 这个曲子我挺喜欢的，音调不高也不低。半个小时搞定了，十五分钟挑歌，十五分钟敲成代码。 今天验收一看。神仙打架。 变调可以升八度降八度的，可以暂停的，可以倍速播放的，还有我压根没听过的“按钮消抖”。 麻了。 对了，似乎只有我一人，真的只完成了基础任务。 我验收恐怕只有一分钟，半分钟用在连接板子上。 ","date":"2022-08-11","objectID":"/posts/life/thought_about_involution/:1:0","tags":["思考"],"title":" 数电实验验收，关于内卷","uri":"/posts/life/thought_about_involution/"},{"categories":["life"],"content":"2 内卷无时无刻不伴随着我。 大一时我是卷怪。每天六点起床，“学”到晚上十二点。每一小时都安排得仔仔细细。 因为高考失利，没能进计算机系，为了转专业迫不得已。 结局是美好的。我成功了。 我和第二名的差距，比第二名和第十三名的差距都大。 只是绩点而已。 这也是我最后悔的事情之一。 如果大一我能不要那么卷，我是不是能学到更多有意思的东西？而非延续高三的经历，题海中挣扎一年。 编译原理、计组、计网、操作系统……那么多有意思的东西，学都学不完。 ","date":"2022-08-11","objectID":"/posts/life/thought_about_involution/:2:0","tags":["思考"],"title":" 数电实验验收，关于内卷","uri":"/posts/life/thought_about_involution/"},{"categories":["life"],"content":"3 内卷这件事可怕之处在于大家也许不想卷，甚至极度反感卷，却又不得不卷。 考研的机会越来越少，竞争越来越激烈。保研的名额有限，想去好学校还得有亮眼的经历。 学生的信息渠道狭窄，不知道其他人如何，也不知道自己要做到什么程度才合适——正如我大一不知道要卷成什么样才能刚好转专业而又不至于浪费时间。 单一的信息面锁定了我们，我们惟卷以待——只要卷到最狠，一定是最优解。 我不卷了，不止是因为我反卷。我身边那么多人，没见过哪个爱卷的。 我能不卷，只是因为我不打算读研。我毕业就去工作，而且自信有能力进个好厂。 如果我要读研呢？那我大概也会成为卷卷洪流的一份子吧。 大一的内卷经历确实给了我学习自己喜爱专业的机会，然而除此之外几乎只余祸害。 内卷不会为我的人生留下太多，只是犹如过境蝗虫般攫取我的青春罢。 以后我也许会回忆起我大二时写的编译器、爬虫、写作软件，至于数电实验雕花，恐怕很快就会遗忘吧。 ","date":"2022-08-11","objectID":"/posts/life/thought_about_involution/:3:0","tags":["思考"],"title":" 数电实验验收，关于内卷","uri":"/posts/life/thought_about_involution/"},{"categories":["life"],"content":"4 说了很多。 但其实仔细一想，为什么而卷？ 答曰：先苦后甜。少壮不努力，老大徒伤悲。（容我把卷和努力混为一谈，这俩并不是一个性质） 我们期待着更好的未来。那就必须在看不清路的现在做好准备。 问题是，更好有多好？更好能多好？以及，值得吗？ 高三毕业的时候我就知道。 我未来不需要大富大贵、山珍海味、名动天下等等听上去很诱人的话。 我只希望悠悠闲闲过完一生。 我不打算结婚，房、车对我来说可有可无。我不在乎衣服好坏，能穿就行；我不在乎吃得多好，门口沙县小吃就是顶美味的。 想了想，我最可能烧钱的理想也许是，希望将来可以走遍整个中国，尝遍所有的民间美食——不过因为比较懒，可能明年就会砍了这个理想吧。 即使是这样，我大一还是卷了。 大部分是因为更喜欢计算机而不喜欢原专业；另一部分也不可否认，计算机的待遇现在是极好的。 当然现在差不多彻底摆了，因为几乎可以肯定现在的我按部就班就足够达成目标了。 那其他人呢？不可以要求其他人什么都不在乎，我不在乎只是个人性格使然。 那在乎的，就活该得不到，或者活该卷成这样才能得到？ 婚、房、车对于许多现代人来说是刚需。为什么刚需的满足都已经这么艰难了？ ","date":"2022-08-11","objectID":"/posts/life/thought_about_involution/:4:0","tags":["思考"],"title":" 数电实验验收，关于内卷","uri":"/posts/life/thought_about_involution/"},{"categories":["life"],"content":"5 感触良多，迷茫良多。 其实想写的不止这些。有很多想说的内容却出不了口。 也许是我的文笔实在浅薄吧。 还是写代码适合我。 ","date":"2022-08-11","objectID":"/posts/life/thought_about_involution/:5:0","tags":["思考"],"title":" 数电实验验收，关于内卷","uri":"/posts/life/thought_about_involution/"},{"categories":["tech"],"content":"写这篇博客时，我因为 CS110L 的作业要求必须安装 Linux 环境。几番周折最后选择了 Windows 下的 WSL2。现在看来很不错。 过程中也遇到一些小坑： 磁盘占用问题，wsl --install默认安装在 C 盘 代理问题 “# Failed to establish a socket connection to proxies: [“PROXY XXX.XXX.XXX.XXX:7890”]” 换源问题，源和系统版本不一致导致升级的包不对 Rust 编译报错\"/usr/bin/ld: cannot find Scrt1.o: No such file or directory\" 下面一一详细记录了问题和解决方案，参考了很多网上的方法，都附了链接。 ","date":"2022-08-11","objectID":"/posts/tech/wsl_rust_tips/:0:0","tags":["Linux","WSL","Ubuntu","Rust","代理"],"title":"使用 WSL2 时碰到的小问题","uri":"/posts/tech/wsl_rust_tips/"},{"categories":["tech"],"content":"磁盘占用问题 安装 WSL2，刚开始我用的是微软文档里写的方法，直接在命令行里wsl --install。后来我忽然意识到，这样安装的系统默认是在 C 盘的。而我的 C 盘早都红了，只留下 7、8 个 G 的样子。考虑到未来的使用恐怕是不足够的。 好嘛，只好先卸载 WSL 了。准确来说是卸载 WSL 里面安装好的 Linux 发行版。这个找网上教程即可。 顺便一提，如果不用wsl --install，按照网上找到的教程，你需要手动去控制面板打开 Windows 的 WSL 选项。重启后再去手动下载 ubuntu 发行版。wsl --install应该是帮你把这两步都做了，但是还是需要重启的，它会在重启后才安装 Linux 发行版。 想要自定义安装路径，就需要手动下载 ubuntu 安装包，在微软 WSL2 文档 中查看发行版列表。如下 如果本文附带的链接失效了，你可以自己去搜索微软的 WSL2 文档。 点击上图中你想要的发行版，就会开始下载。另外提一句，最上面的 Ubuntu 似乎是 20.04 版本的，不知道它和下面的 Ubuntu 20.04 有什么区别。 下载好的文件大概是这个样子。 直接运行它会直接通过 Microsoft Store 安装，不过我们不这么做（因为可能改不了路径）。我们把它当作压缩文件打开，比如改后缀打开，或者右键、打开方式里选压缩软件打开。内容大致如下。 里面有很多东西，不过比较大的就一个 x64 结尾，一个 ARM64 结尾。根据架构自行选择即可。 把这个 .appx 文件当作压缩文件解压。如果不行，就先把它后缀的改成 .zip 再解压。解压的目标位置就是你希望 Linux 发行版安装的位置。 现在你应该得到了一堆文件，其中应该有一个很显眼的 ubuntu.exe。运行它，等待安装就可以了。最后它可能会生成一个 .vhdx 文件，这应该就是你的 Linux 发行版系统内部所有文件的存储位置了（所以其它文件可以删了）。 最后，在命令行输入 wsl，就可以启动 Linux 系统啦。 参考文章：自定义 WSL 的安装位置，别再装到 C 盘啦 ","date":"2022-08-11","objectID":"/posts/tech/wsl_rust_tips/:1:0","tags":["Linux","WSL","Ubuntu","Rust","代理"],"title":"使用 WSL2 时碰到的小问题","uri":"/posts/tech/wsl_rust_tips/"},{"categories":["tech"],"content":"代理问题 如果你挂了梯子，那么可能在 WSL 里遇到问题。你可能会看到类似于 # Failed to establish a socket connection to proxies: [\"PROXY XXX.XXX.XXX.XXX:XXXX\"] 这样的错误。而且你会发现，在 Windows 上能访问 Google 等网站，在 WSL 上用 wget 等命令就无法访问。 此时可以先去 powershell（注意在宿主机，也就是 Windows 上）执行 ipconfig 查看 WSL 的 IPv4 地址。类似于下图 假设你查询到的 IP 地址是 XXX.XXX.XXX.XXX，那么就在 WSL 上修改 http_proxy 和 https_proxy 这两个环境变量。比如用export命令。 export http_proxy=\"http://XXX.XXX.XXX.XXX:PORT\" export https_proxy=\"http://XXX.XXX.XXX.XXX:PORT\" 其中 PORT 是你的代理软件开放的 LAN 端口，对于 clash 而言是 7890。（2022/8/11 时） 注意 https_proxy 的值不需要是 https，否则未来很可能在使用 curl 时出现 OpenSSL 错误。 这个命令是每次打开 WSL 都要输的，你可以用别名来简化流程，也可以设置 /etc/profile 文件来一劳永逸。 而且你还需要打开你代理软件的“允许 LAN”的选项。如果你用的是 Clash for Windows，就是首页的那个 Allow LAN。 如果现在还不行，有可能是防火墙的问题，在控制面板-\u003e系统和安全-\u003eWindows Defender 防火墙-\u003e允许应用通过 Window 防火墙中，把你的代理软件的相关项全部打上勾。 现在在 WSL 里应该也可以访问 Google 了。 如果某一天你发现 WSL 里面代理又不好使了，可以重新在 Windows 下输入 ipconfig 查看 WSL 的 IP 地址。这个地址不是固定的，有可能变化。 参考博客：WSL 开发环境的坑（不定期更新） ","date":"2022-08-11","objectID":"/posts/tech/wsl_rust_tips/:2:0","tags":["Linux","WSL","Ubuntu","Rust","代理"],"title":"使用 WSL2 时碰到的小问题","uri":"/posts/tech/wsl_rust_tips/"},{"categories":["tech"],"content":"换源问题 换源也不是随便换的。 首先用命令 lsb_release -a，查看自己的发行版本和代号。 比如我用的这个是 ubuntu 20.04 代号为 focal。 那么相应的，换源时就得注意这个代号。 首先用 sudo vim /etc/apt/sources.list 打开文件（如果你不会使用 vim 就用别的文本编辑器） 然后删除原来的内容，输入 #阿里源 deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse 注意看，其中有 focal 这个代号，一定要和自己版本的代号一致。 换完源之后别忘了 sudo apt-get update # 更新源 sudo apt-get upgrade # 更新软件包 参考博客：Ubuntu 20.04 \u0026\u0026 Ubuntu 18.04 修改 apt 源 ","date":"2022-08-11","objectID":"/posts/tech/wsl_rust_tips/:3:0","tags":["Linux","WSL","Ubuntu","Rust","代理"],"title":"使用 WSL2 时碰到的小问题","uri":"/posts/tech/wsl_rust_tips/"},{"categories":["tech"],"content":"rust 编译报错 /usr/bin/ld: cannot find Scrt1.o: No such file or directory /usr/bin/ld: cannot find crti.o: No such file or directory 这个可能是因为我刚开始换源没换对引发的错误。 总之如果你出现这个问题，可以尝试按上面操作换到正确的源上，然后更新一下试试。 如果不行的话，再使用 sudo apt-get install libc6-dev 安装软件包。这样应该能解决问题了。 usr/bin/ld: cannot find crti.o: No such file or directory ","date":"2022-08-11","objectID":"/posts/tech/wsl_rust_tips/:4:0","tags":["Linux","WSL","Ubuntu","Rust","代理"],"title":"使用 WSL2 时碰到的小问题","uri":"/posts/tech/wsl_rust_tips/"},{"categories":["tech"],"content":"总结 WSL2 要占用不少内存，不过使用起来体验比 VMWare 要好很多。如果你不是很在乎图形界面的话，那么推荐可以尝试一下。（其实也有在 WSL2 中使用 GUI 的方法，不过似乎要 Win11） 版权声明：本文采用 CC BY 4.0 进行许可，转载请注明出处。 本文链接：http://cxz888.xyz/posts/tech/wsl_rust_tips/ ","date":"2022-08-11","objectID":"/posts/tech/wsl_rust_tips/:5:0","tags":["Linux","WSL","Ubuntu","Rust","代理"],"title":"使用 WSL2 时碰到的小问题","uri":"/posts/tech/wsl_rust_tips/"},{"categories":["tech"],"content":"今天 (2022/2/26) 做 CS 110L 的 week2 作业，内容是用 Rust 编写一个简单的 diff 命令。 我才知道原来 Linux 和 Git 的 diff 命令，它的底层算法之一叫做 Myers 算法，而其根本原理是最长公共子序列。 本文讲述 LCS 的使用和 Myers 算法。前置知识是动态规划求解 LCS。 ","date":"2022-08-11","objectID":"/posts/tech/lcs_for_diff_myers/:0:0","tags":["算法","动态规划","C/C++"],"title":"最长公共子序列 (LCS) 在 diff 命令中的应用——Myers 算法","uri":"/posts/tech/lcs_for_diff_myers/"},{"categories":["tech"],"content":"diff 命令做了什么 如果你常用 GitHub，应该经常可以看到如下界面。 这表示 diff 命令显示出的本次提交和仓库里之前版本的区别。如你所见，红色、以 - 开头的行代表删除，绿色、以 + 开头的行代表新内容。 你可能会说，上图这样明显是对同一行进行修改，而并没有删除或者添加行啊。确实，但是仔细想想，修改的操作其实可以等价地转换为删除原来的行，然后添上修改之后的行。 这样的等价转换对于底层算法的实现是比较有利的。 我们把代码不同版本的对比问题抽象一下。首先是代码，代码是一个行构成的序列，也就是说，它的先后关系是重要的；那么，两个版本的代码之间的比较，就相当于两个序列之间的比较。 除去删除或者添加的行，你可以看到还有很多不变的行。它们就是两个序列所共有的成分。而你可以想一下，删除的行，实际上是旧版本代码的特有内容；新添的行，实际上是新版本代码的特有内容。 那么每个代码都是由特有和共有的内容混合组成的，如下。 code1: 共有 1 旧特有 1 共有 2 旧特有 2 旧特有 3 共有 3 code2: 共有 1 共有 2 新特有 1 共有 3 新特有 2 我们要做的，其实就是判断两个代码之间哪些是共有、哪些是旧版本特有，哪些是新版本特有的。 到这你就可以想到了，共有的成分，那不就是公共子序列吗。 ","date":"2022-08-11","objectID":"/posts/tech/lcs_for_diff_myers/:1:0","tags":["算法","动态规划","C/C++"],"title":"最长公共子序列 (LCS) 在 diff 命令中的应用——Myers 算法","uri":"/posts/tech/lcs_for_diff_myers/"},{"categories":["tech"],"content":"最长公共子序列(LCS) 这一部分我假定你是有相关基础的，如果没有的话建议去搜几篇文章看看。 我们来回忆一下，LCS 描述这样一种问题：在两个序列中，找到它们共有的最长的子序列。序列一是 1 2 3 4，序列二是 1 3 4 5，那么 LCS 就是 1 3 4。 LCS 的求法，比较常规的是动态规划 $O(n^2)$ 求解。 假定两个序列是 s1 和 s2，长度分别为 n 和 m，我们定义二维数组 dp[n+1][m+1]（+1 是为了方便）。dp[i][j] 表示“s1 前 i 项和 s2 前 j 项的 LCS 的长度”。那么就有如下状态转移函数。 $$ \\begin{aligned} dp[i][j]= \\begin{cases} \u00260,\u0026若 i=0 或 j=0\\\\ \u0026dp[i-1][j-1]+1,\u0026若s[i-1]=s[j-1]\\\\ \u0026max(dp[i-1][j],dp[i][j-1]),\u0026若s[i-1]\\ne s[j-1] \\end{cases} \\end{aligned} $$ ","date":"2022-08-11","objectID":"/posts/tech/lcs_for_diff_myers/:2:0","tags":["算法","动态规划","C/C++"],"title":"最长公共子序列 (LCS) 在 diff 命令中的应用——Myers 算法","uri":"/posts/tech/lcs_for_diff_myers/"},{"categories":["tech"],"content":"Myers 算法 如果让你用 LCS 来做 diff，你会如何完成？我的第一想法是，从dp[n][m]开始，可以依次往上追溯，找到所有的公共项。那么两个序列中剩下的部分就是各自特有的了。 Myers 算法也是这个思路，不过它稍微高明一些，在回溯的过程中就同时判定公共项和特有项。 我们先来看一张图。 图片来自这个博客 上图是序列 ABCBDAB 和 BDCABA 的 dp 结果。箭头表示转移路径。 如你所见，从最右下角出发，沿着路径一直向左上方找到起点（灰色底色）。 Myers 算法的思路就是：如果它是向左上转移，说明这是公共部分；如果向上转移，那么它就是第一个序列的特有部分；如果向左转移，那么就是第二个序列的特有部分。 C++ 代码如下（Rust 直接改的，我没测试） void print_diff(vector\u003cvector\u003cint\u003e\u003e \u0026dp, vector\u003cstring\u003e \u0026s1, vector\u003cstring\u003e \u0026s2, int i, int j) { if(i \u003e 0 \u0026\u0026 j \u003e 0 \u0026\u0026 s1[i - 1] == s2[j - 1]) { print_diff(dp, s1, s2, i - 1, j - 1); cout \u003c\u003c \" \" \u003c\u003c s1[i - 1] \u003c\u003c endl; } else if(j \u003e 0 \u0026\u0026 (i == 0 || dp[i][j - 1] \u003e= dp[i - 1][j])) { print_diff(dp, s1, s2, i, j - 1); cout \u003c\u003c \"+ \" \u003c\u003c s2[j - 1] \u003c\u003c endl; } else if(i \u003e 0 \u0026\u0026 (j == 0 || dp[i][j - 1] \u003c dp[i - 1][j])) { print_diff(dp, s1, s2, i - 1, j); cout \u003c\u003c \"- \" \u003c\u003c s1[i - 1]; } else { cout \u003c\u003c endl; } } 你可以看到，它是一个递归的做法，以此来让输出顺序颠倒。 你也可以不用递归，每次把输出结果存在一个 stack 中，以此用循环完成。 ","date":"2022-08-11","objectID":"/posts/tech/lcs_for_diff_myers/:3:0","tags":["算法","动态规划","C/C++"],"title":"最长公共子序列 (LCS) 在 diff 命令中的应用——Myers 算法","uri":"/posts/tech/lcs_for_diff_myers/"},{"categories":["tech"],"content":"总结 有了以上知识点，想实现 diff 就很容易了。我们可以用 getline 之类的读入代码，用一个 vector\u003cstring\u003e 存储，每一项存储一行代码。然后再用一个 LCS 函数求出 dp 数组。最后传 到print_diff 函数，就可以得到结果了。 不过，LCS 的 DP 求解算法复杂度是 $O(n^2)$，而且据说被证明不可改进。所以据说实践中常常用一些线性复杂度的近似算法。 版权声明：本文采用CC BY 4.0进行许可，转载请注明出处。 本文链接：http://cxz888.xyz/posts/tech/lcs_for_diff_myers/ ","date":"2022-08-11","objectID":"/posts/tech/lcs_for_diff_myers/:4:0","tags":["算法","动态规划","C/C++"],"title":"最长公共子序列 (LCS) 在 diff 命令中的应用——Myers 算法","uri":"/posts/tech/lcs_for_diff_myers/"},{"categories":["tech"],"content":"这个系列主要是推荐一些计算机上好使用的工具。目前计划是除去软件，还会分享一些网站，所以也细分开来了。 本文介绍 WGestures，一个免费开源的鼠标手势软件。 ","date":"2022-08-11","objectID":"/posts/tech/recommand_tool_wgestures/:0:0","tags":["推荐"],"title":"「工具推荐——软件」1.WGestures：鼠标手势","uri":"/posts/tech/recommand_tool_wgestures/"},{"categories":["tech"],"content":"功能介绍 你曾经也许在某些浏览器中接触过鼠标手势。我最初是在猎豹浏览器上用到的，虽然浏览器的整体使用感觉没那么好，但是鼠标手势这一项却是非常不错。 后来换到 Chrome，再到 Vivaldi，再到 Edge，始终没有更好的体验。实际上它们有的压根就不支持鼠标手势，也是蛮遗憾的。 Chrome、Edge 的插件里有很多鼠标手势相关的，我用过几款，只能说大失所望（很久之前了，现在不知道如何）。 今天要推荐的这款 WGestures，几乎解决了我的所有痛点。而且不仅仅是局限于浏览器中，它是在整个系统上都可以使用的全局鼠标手势软件。 下面是两张示例，图片来自于 WGestures 的 Github 仓库。 如你所见，你可以用一个鼠标手势来执行一个动作，而且它会在屏幕下方展示出手势的名称，防止误操作。 除去这个之外，它还支持一个叫做触发角 \u0026 摩擦边的功能。只需要把鼠标移动到屏幕的四个角落或者是在四条边上摩擦就可以执行相应的动作。不过因为我比较多动症，很容易误触发，所以就没用它。 WGestures 支持 Windows7+。它有一个升级的界面更优美、功能更丰富的第二版，WGestures2，除了 windows 还支持 macOS，不过这是一个付费软件，大约需要三四十人民币的样子。 下载地址：官网。 ","date":"2022-08-11","objectID":"/posts/tech/recommand_tool_wgestures/:1:0","tags":["推荐"],"title":"「工具推荐——软件」1.WGestures：鼠标手势","uri":"/posts/tech/recommand_tool_wgestures/"},{"categories":["tech"],"content":"软件特点 接下来讲一讲 WGestrues 一些很对我胃口的点。 首先是，它高度可定制化，这表现在两点。 第一，它是开源软件，这意味着你如果对软件功能不满意，完全可以从代码层面上进行自己的修改。它的源码是 C# 写的。 第二，设置丰富且简明。它可以设置的东西包括且不限于：开机运行、自动更新、是否显示手势名称和轨迹、轨迹颜色等等。手势触发的动作也可以自己选择，甚至可以让手势执行代码（支持 Lua 脚本）。 它还有一个有点是占用性能极低，我运行时仅占用 15M 的内存。 ","date":"2022-08-11","objectID":"/posts/tech/recommand_tool_wgestures/:2:0","tags":["推荐"],"title":"「工具推荐——软件」1.WGestures：鼠标手势","uri":"/posts/tech/recommand_tool_wgestures/"},{"categories":["tech"],"content":"使用指南 这是软件界面。 如你所见，上面的选项已经十分清楚了，如果有不理解它意思的，将鼠标放上去会有详细介绍。 这里讲一下，手势键里的“X 键”，实际上是某些鼠标上会附加的网页前进和网页后退键（一般在鼠标的侧面）。然后就是按 Ctrl-Shift-Alt+W 可以停止使用鼠标手势，在打游戏时很好用。 更重要的是“手势”页，如下 左侧的边框里，可以选择全局设置或者是针对某些软件进行特殊设置。而右侧就可以设置你想要的鼠标手势了，触发上面那些手势，就可以执行下面设置的相应动作，可以看到功能极其丰富。 ","date":"2022-08-11","objectID":"/posts/tech/recommand_tool_wgestures/:3:0","tags":["推荐"],"title":"「工具推荐——软件」1.WGestures：鼠标手势","uri":"/posts/tech/recommand_tool_wgestures/"},{"categories":["tech"],"content":"总结 这款软件给我带来了不少的助力，算是提高了一些工作效率吧，而且它简单易用的设置实在深得我心，可以说是我最喜欢的软件之一了。 第一期软件介绍到此结束啦。如果你有想推荐的软件，欢迎联系我投稿哦。 本文采用 CC BY 4.0 进行许可，转载请注明出处。 本文链接：http://cxz888.xyz/posts/tech/recommand_tool_wgestures/ ","date":"2022-08-11","objectID":"/posts/tech/recommand_tool_wgestures/:4:0","tags":["推荐"],"title":"「工具推荐——软件」1.WGestures：鼠标手势","uri":"/posts/tech/recommand_tool_wgestures/"},{"categories":null,"content":"\rTriNitroTofu\r_(:з」∠)_\r","date":"2022-08-11","objectID":"/friends/:0:0","tags":null,"title":"友链","uri":"/friends/"},{"categories":null,"content":"交换友链 可以在评论中按照如下格式留言： 网站名 网址 logo 地址 简单的描述 ","date":"2022-08-11","objectID":"/friends/:1:0","tags":null,"title":"友链","uri":"/friends/"},{"categories":null,"content":"本站信息 名称：闲云的博客 网址：cxz888.xyz logo：https://cxz888.xyz/images/avatar.png 描述：在互联网的小角落里，慢慢学习和生活 ","date":"2022-08-11","objectID":"/friends/:2:0","tags":null,"title":"友链","uri":"/friends/"},{"categories":["tech"],"content":"本文讲述如何优化 WordPress 网站的界面布局。 涉及内容：网站后台、主题、PHP、HTML、CSS。 面向人群：新手。 前置知识：WordPress 网站的搭建（见「个人博客建站笔记」——1.网站建成）。 ","date":"2022-08-11","objectID":"/posts/tech/blog_site_note_2/:0:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」2.网站的布局","uri":"/posts/tech/blog_site_note_2/"},{"categories":["tech"],"content":"网站后台 如果你刚刚搭建好一个 WordPress 网站，那么此时你应该得到了一个默认主题下的主页，只有一个示例页面。 此时网页的功能很简陋，几乎只能写写文章，发发评论。像什么标签、分类、留言板都没有。而且默认的主题可能和你的审美对不上，还有标题字体太小、主页面背景不好等问题。 那么就需要利用网站的后台进行一些自定义的设置了。 点击左上角仪表盘的标志，或者在你网址的后方加上 /wp-admin，就可以进入后台。 后台左侧的菜单里有很多选项，这里不一一细讲。 不过值得一提的是，在默认的主题下，你可以在外观-编辑器（beta 版）里可视化地调整页面布局，这一点还是很方便的。外观-自定义是另一个方便的工具，也是可以即时预览你的修改的，你还可以在里面设置网站的名称、副标题和图标。 当然，上述修改大多只是小幅微调，想要有大的整体页面上的变化，需要你进行很多很细致的调整。真正一步到位，改变整个网站的是接下来介绍的主题。 ","date":"2022-08-11","objectID":"/posts/tech/blog_site_note_2/:1:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」2.网站的布局","uri":"/posts/tech/blog_site_note_2/"},{"categories":["tech"],"content":"主题 如同很多软件一样， WordPress 同样有主题系统。它的主题不仅改变网页的样式，还会更改网页的交互逻辑，比如，如何登录、如何评论等等。 在后台的外观-主题页面里，你可以在线搜索主题，也可以上传一个 zip 包压缩的主题。主题的推荐可以去知乎等地求解。就我所知许多开发者会在 Github 上开源他们的主题，我之前用的 WordPress 主题就是 Github 上面下载，然后自己做了一些修改。 一些比较完善的主题会提供友好的界面来让你进行一定程度的定制，而无需写代码。如果你没有什么代码基础，那么还是建议仔细挑选一个这样的主题。不过再如何完善，其自由度也很难及得上写代码。 大多数时候，用好主题就可以得到一个令人满意的优美网站，不过如果你还想要更多、更个性化的定制，那么你可以继续往下阅读，我会讲一些前端和后端相关的代码处理。而如果你不想写代码，可以跳到最后，我会推荐一些个人感觉不错的免费主题。 ","date":"2022-08-11","objectID":"/posts/tech/blog_site_note_2/:2:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」2.网站的布局","uri":"/posts/tech/blog_site_note_2/"},{"categories":["tech"],"content":"HTML 一般地，网页本质上都是 HTML 代码构成的。 HTML 中文名称超文本标记语言(Hyper Text Markup Language)，听上去很厉害，其实所谓超文本就是说，它能够表达的内容不单单是文本。 如下代码就表示一个文字内容为“只能按”的按钮。 \u003cbutton\u003e只能按\u003c/button\u003e 它真正表现在网页上就是这个样子：只能按。 层层嵌套的 HTML 代码，可以生成功能十分丰富的网页。 比如你现在看的这个网页，你可以在空白处右键，可能就会有“查看网页源代码”的选项。你将会在其中看到整个网页的 HTML 形式，如果你将它复制下来存到本地再打开，完全可以得到一个一模一样的网页。 当然，只是看上去一样，实际上去你去点那些按钮，可能都是毫无反应的，因为网页系统往往是由很多个 HTML 文件构成，而且还会依托其它的一些东西。 比如说，CSS，或称层叠样式表(Cascading Style Sheets)。 ","date":"2022-08-11","objectID":"/posts/tech/blog_site_note_2/:3:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」2.网站的布局","uri":"/posts/tech/blog_site_note_2/"},{"categories":["tech"],"content":"CSS HTML 描述网站的内容，但它对于内容的样式、形貌的表达力是比较薄弱的。 比如你想要控制刚刚那个按钮，它背景色什么样子、前景色什么样子、字号多大，距离右边框多远等等。HTML 很难完成这些，而这就是 CSS 发光发热的领域了。 事实上，你应该很少会需要写 HTML 代码，因为它是主管内容的——而我们有更好的、可视化的方式来管理内容，比如 markdown 或者是 WordPress 自带的编辑器。相对来说你可能会和 CSS 打更多交道，它是主管外貌的。 ","date":"2022-08-11","objectID":"/posts/tech/blog_site_note_2/:4:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」2.网站的布局","uri":"/posts/tech/blog_site_note_2/"},{"categories":["tech"],"content":"PHP 如果按照程序员的分类，HTML 和 CSS 所作的都是“前端”的工作，简单来说就是直接呈现在用户视觉上的效果。 其实，传统的前端开发是使用 HTML+CSS+JavaScript 三件套的。不过我对 JS 目前没有太多了解，就先不写了。 而这背后，当然还需要一个工具人，处理网页和服务器之间的数据交换。 PHP 是一个后端开发的语言。 目前我最常用到 PHP 的场景，其实是需要做条件判断的时候。比如用户是否登录，肯定是要展现不一样的界面的；还有就是根据权限隐藏掉一部分不太好展示的东西。 ","date":"2022-08-11","objectID":"/posts/tech/blog_site_note_2/:5:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」2.网站的布局","uri":"/posts/tech/blog_site_note_2/"},{"categories":["tech"],"content":"例子：Clearision Clearision 是之前本站的主要主题。它相对来说功能比较简陋，但是界面我蛮喜欢的。 而且功能简陋，所以代码逻辑也比较好理解、好修改。 所以接下来我就以它为例子，讲一讲怎么自定义主题。 ","date":"2022-08-11","objectID":"/posts/tech/blog_site_note_2/:6:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」2.网站的布局","uri":"/posts/tech/blog_site_note_2/"},{"categories":["tech"],"content":"主题提供的设置 正如大部分主题，Clearision 在后台提供了一些设置方便自定义网页的外观和交互。如下： 在这里你可以设置主页上的 Logo 头像、网页的图标、社交主页的网址、是否显示访客环境、是否显示作者等。 整体而言功能不多。 ","date":"2022-08-11","objectID":"/posts/tech/blog_site_note_2/:6:1","tags":["网站","WordPress"],"title":"「个人博客建站笔记」2.网站的布局","uri":"/posts/tech/blog_site_note_2/"},{"categories":["tech"],"content":"修改主题文件 接下来是比较关键的部分。在 Clearision 设置的下方，可以看到主题文件编辑器。 是的，接下来就需要修改代码了。 首先要提一点的是，Wordpress 官方推荐使用子主题的方式来自己修改主题，这样的好处是如果原主题更新了，不会覆盖掉自定义的内容。方法可以在 wordpress 的教程里找到。 对于 Clearision 没有这个必要，一来是原主题已经很久没更新过了，估计以后也不会更新了，二来是子主题的方案还是会导致一些问题（如缓存等）。 我们直接在原文件里更改就行。也就是上图右侧那些主题文件。有些文件的中文会指出它的用处。 这些文件的加载顺序、逻辑结构也是很有讲究的，这里不深究，有兴趣可以去自行搜索。 functions.php 和 style.css 是我经常打交道的两个。 functions.php 添加一些功能性的操作。比如说我想修改用户注销之后跳转的界面，就可以在里面加入如下内容 # 注销后重定向至 add_action('wp_logout','auto_redirect_after_logout'); function auto_redirect_after_logout(){ nocache_headers(); wp_safe_redirect( home_url() ); exit(); } 它也可以用来修改一部分的外观内容，主要是是否展示，而不管其细节。 而正如上面所言，style.css 主管整个网站的所有样式细节。 比如我想修改用户“发表评论”按键的样式，就可以这么写。 /* 发表评论的样式 */ #cmt_submit { margin: 0; -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; -webkit-border-radius: 0; border-radius: 0; background: #6f6f6f; color: #eee; font-weight: 600; display: inline-block; border: none; cursor: pointer; -webkit-border-radius: 3px; border-radius: 3px; } 语法部分我不讲，去找些教程有点基本的了解即可。 另外，CSS 中是可以重复定义一个元素（部件）的样式的。Clearision 原作者在 CSS 里面写了很多内容，如果想要修改怎么办？无需找到相关的内容然后修改，只要在最下方新添样式就可以了。后定义的样式会覆盖先定义的样式。 你可能在 CSS 编辑界面上方看到提示，说可以在“内建的 CSS 编辑器”中修改 CSS。 这个实际上就是我上面提到的外观-自定义里面的一个小功能，所谓的额外 CSS。界面大致如下： 在左侧的文本框中输入的 CSS 代码，会实时地同步到右侧的网页中，对于调整外观来说十分方便。 这个功能配上浏览器提供的“检查”（审核元素、开发者工具、F12）会如虎添翼。只需在想要修改样式的地方右键-\u003e检查，就会出现类似下面的界面（这是 Edge 浏览器的界面） 在右侧的开发者工具中就可以查看网页的 HTML 代码和 CSS 样式，甚至可以直接在里面修改。 你可能会说了，不会写代码怎么办？其实我也不是很会，CSS 和 PHP 我都没有系统学习过。大部分的代码其实都来自于网络，只要可以合理描述自己的需求，还是能够找到想要的内容的。 但是完全不会写代码还是很不便的。网上的代码质量参差不齐，而且可能有过期风险，也可能面临不同浏览器、不同屏幕分辨率等一系列问题。复制代码之后可能会还需要一些微调来解决这些问题。所以有更高需求的话建议还是沉下心来细细学习一下，总之不会亏。 ","date":"2022-08-11","objectID":"/posts/tech/blog_site_note_2/:6:2","tags":["网站","WordPress"],"title":"「个人博客建站笔记」2.网站的布局","uri":"/posts/tech/blog_site_note_2/"},{"categories":["tech"],"content":"主题推荐 下面是我用过的，比较适合个人博客的两款主题，都是简约风的。 就算你打算自定义主题，我也推荐你下载几个美观的主题看看。它们会给你增添灵感，而且你可以参考它们的代码实现。 ","date":"2022-08-11","objectID":"/posts/tech/blog_site_note_2/:7:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」2.网站的布局","uri":"/posts/tech/blog_site_note_2/"},{"categories":["tech"],"content":"MDX 这是我个人比较喜欢的另一个主题。功能丰富，界面简洁美观。如果我最先接触到它的话，也许就会使用它。 主题主页，Github 仓库 主题主页里有详细的展示，我建议你可以稍微看一下。下面我也会放一些本站使用该主题后的样貌。 首页： 文章： 这里我没有仔细去调整，实际上，在后台中有非常多的主题样式搭配。如图。 在我短暂的使用中，有两个功能让我很喜欢。 一个是开启夜间模式，另一个是目录。 现在的这个主题已经支持这两个特性了，很好用。（本站已经不是用 WordPress 而是 Hugo 了） ","date":"2022-08-11","objectID":"/posts/tech/blog_site_note_2/:7:1","tags":["网站","WordPress"],"title":"「个人博客建站笔记」2.网站的布局","uri":"/posts/tech/blog_site_note_2/"},{"categories":["tech"],"content":"Indite 这个主题可以直接在 Wordpress 后台里添加。 大致外观如下： 可以看到配色比较柔和，页面也很简洁。 这个主题的大部分功能都可以通过外观-自定义修改。不过里面的设置都是英文的，可能需要花些力气。 另外一点不太好的是，这个边栏太大了，影响阅读体验。 ","date":"2022-08-11","objectID":"/posts/tech/blog_site_note_2/:7:2","tags":["网站","WordPress"],"title":"「个人博客建站笔记」2.网站的布局","uri":"/posts/tech/blog_site_note_2/"},{"categories":["tech"],"content":"总结 这就是本文的所有内容了。断断续续拖了一个月才完成，着实有些难写。 想写的内容其实还有很多，但是难以表述出来。如果有疑问的话欢迎评论区里提问。 版权声明：本文采用 CC BY 4.0 进行许可，转载请注明出处。 本文链接：https://cxz888.xyz/posts/blog_site_note_2/ ","date":"2022-08-11","objectID":"/posts/tech/blog_site_note_2/:8:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」2.网站的布局","uri":"/posts/tech/blog_site_note_2/"},{"categories":["tech"],"content":"这是我在以前博客的第一篇文章，主要记述的是使用 WordPress 和宝塔 Linux 面板，从零开始搭建一个基础博客网站的过程。 涉及内容：服务器、域名、域名解析、宝塔 Linux 面板、wordpress 的使用。 面向人群：纯新手，无基础。 前置知识：中文，部分英文。基础网络知识：如 IP 地址是什么，GB、Mbps 是什么单位。基础计算机知识：CPU、内存、硬盘空间是什么，能区分硬件和软件。 旧博客的建成，包括下述内容，有很大一部分是 TriNitroTofu 的功劳，大家有兴趣可以去看看。 ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:0:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":["tech"],"content":"基础概念 为了得到一个可以访问的网站，我们至少需要三个东西： 服务器 域名 网站系统 网站系统运行在服务器上，提供一个交互的界面，而别人就可以通过域名来访问网站，这就是三者的关系。 不用域名，直接使用 IP 地址进行访问似乎也是可行的，不过可想而知，那样也太劝退用户了。 下面就分别简单介绍一下这三个东西。 ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:1:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":["tech"],"content":"服务器 首先是挑选一个合格的服务器，这是三者之中最贵的一个。 ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:2:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":["tech"],"content":"服务器的位置 服务器根据位置分为中国大陆和其他的。 中国大陆的服务器，如阿里云、华为云之类的，访问速度快，而且也比较便宜，但是最大的问题是需要进行备案。据说备案至少需要一个月，多则几个月，显然太缓慢了。 据我所知阿里云有一些学生优惠，免费体验建站的，而且后续也蛮便宜 至于其他的服务器，近的如日本、新加坡，远的如美国，到处都有。它们相对于大陆的服务器来说贵一些、延迟高一些，但好处是无需备案。 我本来以为海外的服务器会被墙，实际上并非如此。不干坏事的话应该没问题。 我选择的是其他服务器。 ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:2:1","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":["tech"],"content":"服务器的配置 服务器的选择有很多讲究。 一是硬件配置。想要带得动一个能用的动态博客，至少需要 1.5G 及以上内存。1G 内存应该是比较危险的。CPU 要求不高的样子，我的 CPU 使用率一般都很低。然后就是硬盘空间，一般而言文字类博客也用不了太多，图片的话其实可以用图床。 二是网络配置。主要是流量和带宽，还有一个线路问题。首先是流量，我看到过别人的个人博客，一个月总共 30G 也用了很长一段时间了，需求量其实不算很大。带宽的话，个人博客网站应该是不需要多大的，知乎上有说 1M 宽带就够了的。还有一个线路问题，这个我不是很懂，据说 cn2 线路更快。买服务器的时候可能它不会直接提到线路，但是如果有 “Asia/China Optimization” 之类的字样，应该就是 cn2 线路的。 目前我的网站平均占用 1G 左右内存，硬盘 5.6G。20 号建站到 23 号早晨为止，一共用了 1.4G 左右流量，大部分流量是在建站时候花费的，后面用的很少， 三是系统。主要是 Linux 还是 Windows 的区别，目前我所见的基本都是 Linux，所以最好对 Linux 系统有一些基本的了解，无需太深入。Linux 又分为很多发行版，新人的话推荐用 Ubuntu 20.04。 ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:2:2","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":["tech"],"content":"服务商的选择及服务器购买 以上知识了解了，我们可以开始考虑服务商了。国外的服务商我只知道两家，DMIT 和 vultr。前者贵一些，但是有 cn2 线路。后者未接入 cn2 线路，但是不仅便宜，而且还是按小时收费的。我选的是前者，这里简单介绍一下流程，可以跳过。 进入 DMIT 的网站，注意右上角可以选择中文（不过是繁体）。创建账户进入客户中心，然后点击左上角的创建，选择伺服器。接下来就可以选服务器了。建议货比三家，仔细看看。注意有的是季缴有的是月缴。 选好套餐后点击右下角的继续，下一页是命名主机、设置 root 密码（root 相当于超级用户，拥有所有权限）、选择系统之类的，自己决定就好。然后就是喜闻乐见的付款环节了，结算页面的右侧有一个小框写着“Apply Promo Code”，这个是输优惠码的，如果你是在促销时候买，可能有折扣哦。 启动蓝色修改器，支付完毕后，服务器这一块暂时没什么问题了。 哦对了，查看服务器的时候，一般服务商会发给你公钥和私钥文件，注意私钥文件应该是只会出现一次的，下载后一定要做好备份，千万别丢了。丢了的话，不出意外就是丢失对服务器的控制权了，我不知道联系客服能不能解决问题。 ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:2:3","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":["tech"],"content":"域名 ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:3:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":["tech"],"content":"域名分类 作为一个互联网熟练用户，你应该已经见过不少域名后缀（学名叫顶级域名）了，像什么 .com、.cn、.org 乃至本站的 .xyz。 这些域名也是稍有不同的。 首先，搜索引擎对于不同域名的收录效率是不一样的。像是 .com 这种几十年的老域名，相对来说是快一些的；而.top、.xyz这些新兴域名，可能要慢一些。 其次，不同域名的价格可以差很多。不过一般来说按年租的话比服务器便宜很多。 然后就是，据说 .cn 需要备案（也许因为它是中国顶级域名），但是也有人说不需要，这个我不太清楚。 ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:3:1","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":["tech"],"content":"域名购买 国内的话，可以在阿里云、百度云、华为云这些地方买。 而国外呢，我所知道的有 GoDaddy、name.com、namesilo、namecheap。 我只知道 GoDaddy 是老牌子，而 name.com 便宜些。后两个只是听说性价比不错。我个人选择的是 name.com，它的名气似乎不是很大，以至于中文互联网上没找到什么教程。我就假设你是用的 name.com 了，其他网站的操作也差不了多少。 在购买域名之前，你需要先决定好网站的地址。顶级域名就那么些，你只能从中选，但是二级域名是由你决定的，如 cxz888.xyz。有些域名可能已经被人注册了，这时候可能你就只能换一个了，如果你实在很想要那个域名，那就得想办法联系拥有者商量了。 决定好域名，支付完成后，别着急，域名相关的东西还有下一个呢。 买域名的时候，除去域名本身的费用外，还可能附加一些安全和隐私相关的内容。这部分买不买就取决于你了。不过 SSL 证书之后可以弄到免费的。 ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:3:2","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":["tech"],"content":"域名解析 域名购买好了。但是现在的问题是，这个域名和我们先前买好的服务器有任何关系吗？没有，在不同的商家买的两个东西，哪有什么关系。 接下来讲的就是把这两个东西联系起来，也就是所谓的 DNS 解析。 简单理解一下 DNS 解析。你的服务器有个 IP 地址，假设是 123.123.123.123，然后你有个域名 xxx.com。DNS 解析要做的就是，当用户在浏览器地址栏输入 xxx.com 时，自动让用户访问 123.123.123.123 这个服务器的网站。 购买好域名，进入后台，点进域名的界面。 具体操作 (name.com)：右上角的用户图标下拉菜单点击 overview（概览），在下面找到自己的域名，如 cxz888.xyz，点进去。 另外，name.com 的最下方是可以选择语言的。 差不多是下面这样一个界面。 点击上图框红的 “Manage DNS Records”（管理 DNS 记录）。可以看到下面的界面。 “HOST”（主机）就是你的网站地址，加不加 www 无所谓。而 “ANSWER”（回答）就写服务器的 IP 地址（可以在服务器商那里看到）。填好之后添加记录，OK，目前关于域名要做的就这么多。 ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:3:3","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":["tech"],"content":"网站系统 网站系统，或者在我们这里更具体一些，博客系统。它控制网站的界面展示，用户和网站的交互，网站数据的存取等。 ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:4:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":["tech"],"content":"网站系统的选取 本站（之前）用的网站系统是 WordPress。 还有一个常用的是 typecho。我只听说过，下述对比也只是综合我所看到的评价。 相对而言 WordPress 的功能更丰富，不过没有原生 markdown 支持。typecho 定位是纯粹的个人博客系统，而非 wordpress 这样的 CMS，所以相对来说更简洁一些。如果服务器配置不够，也许可以试试 typecho。 此外，推广一波 TriNitroTofu 大佬自己写的博客系统，December 我们这里选用 wordpress，不过在此之前还需要先对服务器进行一些操作，让它更好用一些。 ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:4:1","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":["tech"],"content":"连接服务器以及宝塔 Linux 面板的使用 购买好服务器之后，除了得到一个光秃秃的 IP 地址和后台的一些资源使用情况，我们所能做的最多其实也就是开机、关机、重启之类的。 所以需要想办法先连接上服务器，我们采用 SSH 连接的方式。 Windows 下需要用到一个叫做 PuTTY 的软件。这是官网下载地址。 启动后，在上面的红框 1 中输入服务器的 IP 地址，然后在左侧找到红框 2 中的 Auth（依次点击 Connection-\u003eSSH-\u003eAuth）。 然后点击红框 3 中，找到之前保存的服务商给你的服务器的私钥文件。 接着就可以点击 open 进行连接。 PuTTY 似乎不会默认为你记住当前的配置，你下一次打开还需要再输一遍 IP，再选一遍私钥。解决方法是在首页 Session 那里的 Saved Sessions 给当前会话取个名，然后点右边的 save 保存，下次就可以双击会话名，或者点击 load 后再打开了。 打开后就是一个命令行界面。它询问 login as，输入 root 回车即可。现在你就正式登录到服务器上了，你可以在命令行中通过命令操作服务器里的系统。 接下来安装宝塔 Linux 面板。 Linux 面板用于提供一个方便的界面，以可视化地管理服务器。宝塔面板还有很多关于网站维护的工具，非常好用。 在命令行中输入 wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh \u0026\u0026 sudo bash install.sh。 等到服务器处理完之后，注意它应该会输出一些内容，像是外网面板地址、内网面板地址、初始默认用户密码之类的。将面板地址复制到浏览器打开（哪个能用用哪个），输入命令行里提供的用户名和密码。然后就能看到一个面板页面。 如果不慎关闭了命令行也没关系。重新打开命令行，在其中输入 bt 命令，会有中文的提示指引，输入编号选择查看默认信息即可。 第一次进入面板，它应该会提示你安装一堆东西，像什么 Apache、mysql、php 之类的。根据 WordPress 的建议，mysql 版本最好选用 5.6+，php 版本最好选用 7.4（之后再更新也是可以的）。安装这些会花很长一段时间，慢慢等待即可。 然后需要将你的网站添加到宝塔面板上，在面板的左侧的“网站”里添加网站即可。记得 FTP、数据库都选创建，PHP 版本选到 7.4 及以上即可。这一步比较简单，不再赘述。 另外，在这一个界面上可以给网站配置 SSL 证书，最好打开强制 HTTPS。另外建议把面板的 SSL 也开了，在面板的设置里面就有。不过开了之后浏览器可能反而告诉你站点不安全，甚至有可能拦截你。我们不管它就好。 ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:4:2","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":["tech"],"content":"wordpress 的安装 这个参考这篇教程即可，写得很详细了。 ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:4:3","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":["tech"],"content":"总结 完成上面这些步骤，就可以在浏览器里通过域名访问网页了。你将会看到 wordpress 默认主题下的首页。 撒花庆祝ヾ(≧▽≦*)o。 如果有什么疑问的话请在评论说明，我会尽我所能解答的。 版权声明：本文采用 CC BY 4.0 进行许可，转载请注明出处。 本文链接：https://cxz888.xyz/posts/blog_site_note_1/ ","date":"2022-08-10","objectID":"/posts/tech/blog_site_note_1/:5:0","tags":["网站","WordPress"],"title":"「个人博客建站笔记」1.网站建成","uri":"/posts/tech/blog_site_note_1/"},{"categories":null,"content":"我 一个计算机专业的大学生 算是一个技术宅 有点二次元 打游戏，不多，手游网游单机荤素不忌 除去编程还写点小说，纯自娱自乐 对世界茫然无知 ","date":"2022-08-09","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"内容 写博客的主要原因是想要记录一下学习技术的经历。 偶尔也会写点生活中的事情。 ","date":"2022-08-09","objectID":"/about/:2:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"联系方式 qq: 717216562（请注明是在本站看到的） idlercloud@gmail.com（不常看） RSS 订阅 全部文章 仅技术文章 仅生活文章 ","date":"2022-08-09","objectID":"/about/:3:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"感谢 本站以 Hugo 驱动 主题采用 FixIt 曾经用的是 WordPress ","date":"2022-08-09","objectID":"/about/:4:0","tags":null,"title":"关于","uri":"/about/"}]